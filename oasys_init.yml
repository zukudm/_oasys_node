- name: Install 
  vars_files: 
    - vars/vars.yml
  hosts: "{{ host }}"
  gather_facts: no
  become: yes
  vars_prompt:
    - name: password
      prompt: What is your password?

  tasks:

    - name: Remove old container if exists
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: absent

    - name: Remove an old volume if exists
      community.docker.docker_volume:
        name: "{{ volume_name }}"
        state: absent
    

    - name: Temporarly run a container
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ source_image_name }}"
        entrypoint: "{{ entrypoint_cmd }}"
        detach: yes
        interactive: yes
        tty: yes
        volumes: 
          - "{{ volume_name }}:{{ container_mount_point }}"

    - name: Some initial preparation before start
      community.docker.docker_container_exec: 
        container: "{{ container_name }}"
        command: sh -c " {{ item }} "
      with_items: "{{ prepare_init_command_list }} "

    - name: Some initial preparation before start 2
      community.docker.docker_container_exec: 
        container: "{{ container_name }}"
        command: sh -c " echo {{ password }} > {{ password_file_location }}"
      

    - name: Some preparation before start
      community.docker.docker_container_exec:
        container: "{{ container_name }}"
        command: sh -c " {{ item }} "
      with_items: "{{ prepare_command_list }} "
    
        

    - name: Find required string and save it
      community.docker.docker_container_exec:  
        container: "{{ container_name }}"
        command: sh -c " {{ single_command1 }} " 
      register: out

  

    - name: Remove temporarly container
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: absent

    - name: Start the container 
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ source_image_name }}"
        detach: yes
        restart_policy: always
        volumes: 
          - "{{ volume_name }}:{{ container_mount_point }}"
        command: " {{ final_command_list }} --unlock {{ out.stdout }}"

     

        





  

        

        
